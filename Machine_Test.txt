controller.js (admin)

// const { log } = require('handlebars');
var database = require('../../config/database');
var mongo = require('mongodb');

exports.adminIndex = (req,res)=>{
    // res.render('admin/test',{admin:true});
    database.then((resDb)=>{
        resDb.collection('ecommerce').find().toArray().then((result)=>{
            res.render('admin/admincategory',{admin:true, result})
        })
    })

}
exports.admin =(req,res)=>{  
            res.render('admin/categoryadd',{admin:true})
}

exports.adminEdit=(req,res)=>{
    let editId = req.params.id;
    database.then((resDb)=>{
        resDb.collection('ecommerce').findOne({_id: new mongo.ObjectId(editId)}).then((result)=>{
            res.render('admin/categoryedit',{admin:true, result})
        })
    })
}

// Subcategory
exports.adminSubcat = (req,res)=>{
    database.then((resDb)=>{
        resDb.collection('sub_category').find().toArray().then((result2)=>{
            console.log(result2);
            
            res.render('admin/adminsubcat',{admin:true, result2})
        })
    })
}

exports.admin1 = (req, res) => {
    database.then(async (resDb) => {
        const result = await resDb.collection('ecommerce').find().toArray();
        const result2 = await resDb.collection('sub_category').aggregate([
            { 
                '$addFields': { 
                    'userid': { '$toObjectId': '$Category1' } //Convert Category1 ObjectId
                } 
            },
            {
                $lookup: {
                    from: 'ecommerce',
                    localField: 'userid',
                    foreignField: '_id',
                    as: 'newForm'
                }
            },
            { $unwind: '$newForm' }
        ]).toArray();
        
        console.log(result2);
        res.render('admin/subcatadd', { admin: true, result, result2 });
    });
};
//edit (subcategory)
exports.adminEdit1 = (req,res)=>{
    let editId = req.params.id;
    database.then(async(resDb)=>{
        const result = await resDb.collection('ecommerce').find().toArray();
        const result2 = await resDb.collection('sub_category').findOne({_id: new mongo.ObjectId(editId)}).then((result2)=>{
            res.render('admin/edit1',{admin:true, result,result2})
        })
    })
}

//products
exports.adminProduct = (req,res)=>{
    database.then(async(resDb)=>{
       let result2= await resDb.collection('product').aggregate([
        {'$addFields' : {'userid' : {'$toObjectId' : '$Category2'}}},
        {
            $lookup : {
                from : 'ecommerce',
                localField : 'userid',
                foreignField : '_id',
                as : 'catdet'
            }
        },
        {'$addFields' : {'userid' : {'$toObjectId' : '$Subcategory1'}}},
        {
            $lookup : {
                from :'sub_category',
                localField : 'userid',
                foreignField : '_id',
                as : 'subcatdet'
            }
        },
        {$unwind : '$catdet'},
        {$unwind : '$subcatdet'}
       ]).toArray()
            res.render('admin/adminproduct',{admin:true, result2})
        })
    }

exports.adminAdd =(req,res)=>{  
    database.then(async(resDb) => {
        let result = await resDb.collection('ecommerce').find().toArray()
        let result2 = await resDb.collection('sub_category').find().toArray()
        res.render('admin/productadd',{admin:true,result,result2})
        
    })
    
}
exports.adminEdit2 = (req,res)=>{
    let editId = req.params.id;
    database.then(async(resDb)=>{
        const result = await resDb.collection('ecommerce').find().toArray();
        const result2 = await resDb.collection('sub_category').find().toArray();
        const result1 = await resDb.collection('product').findOne({_id: new mongo.ObjectId(editId)})
            res.render('admin/edit2',{result1, result, result2, admin:true })
        
    })
}

exports.userList =(req,res)=>{
    database.then(async(resDb)=>{
        const users= await resDb.collection('siteReg').find({status:1}).toArray();
        res.render('admin/userlist',{users,admin:true})
    })
}
exports.viewlist =(req,res)=>{
    const userId= req.params.userId;
    database.then(async(resDb)=>{
        const orders= await resDb.collection('orders').find({userId:userId}).toArray()

        const orderDetails =[]
        for(let order of orders){
            const product= await resDb.collection('product').findOne({_id: new mongo.ObjectId(order.productId)})
            if(product){
                orderDetails.push({
                    productDetails:{
                        ProductName: product.ProductName,
                        ProductDescription: product.ProductDescription,
                        ProductPrice: product.ProductPrice,
                        ProductImage: product.ProductImage
                    }
                })
            }
        }

        res.render('admin/viewList',{orders:orderDetails,admin:true})
    })
}


index.js (admin)
var express = require('express');
var router = express.Router();
var database = require('../../config/database');
var mongo = require('mongodb');
var controller = require('./controller');

router.get('/',controller.adminIndex);

router.get('/categoryadd', controller.admin);

router.post('/categoryadd',(req,res)=>{
    let params={
        Category: req.body.name,
        Description: req.body.desc,
        Image: req.files.file.name

    }
    console.log(params)
    database.then((data)=>{
        data.collection('ecommerce').insertOne(params).then((result)=>{
            let fileup = req.files.file;
            fileup.mv('public/images/' +params.Image).then((imgRes)=>{
                console.log(imgRes);
                res.redirect('/admin')
            })
        })
    })
})
            //delete (category)
router.get('/admincategory/delete/:id',(req,res)=>{
    let delid = req.params.id;
    console.log(delid);
    database.then((resDb)=>{
        resDb.collection('ecommerce').deleteOne({_id: new mongo.ObjectId(delid)}).then((result)=>{
            console.log(result);
        })
    })
    res.redirect('/admin');

})

        //Edit (category)
        router.get('/categoryedit/:id',controller.adminEdit);
        // router.get('/admin/edit1/:id',controller.adminEdit);
        router.post('/edit/:id',(req,res)=>{
            let upId = req.params.id;
            let params={
                Category: req.body.name,
                Description: req.body.desc,
                Image: req.files?.file?.name
            }
            let upDate = ''
            if(req.files?.file){
                upDate ={
                    Category: params.Category,
                    Description: params.Description,
                    Image: params.Image
                }
                let fileup=req.files.file;
                fileup.mv('public/images/' +params.Image)
            }
            else{
                upDate ={
                    Category: params.Category,
                    Description: params.Description,
                }
            }
                    database.then((data)=>{
                        data.collection('ecommerce').updateOne({_id:new mongo.ObjectId(upId)},{$set:upDate}).then((result)=>{
                            console.log(result);
                        })
                    })
           res.redirect('/admin')     
            
        })
        
    //subcategory
    router.get('/adminsubcat',controller.adminSubcat)   

    // router.get('/admin/adminsubcat', controller.admin1);

    router.get('/subcatadd',controller.admin1)
    router.post('/subcatadd',(req,res)=>{
        let params={
            Category1 : req.body.category,
            Subcategory : req.body.subcat
        }
        database.then((data)=>{
            data.collection('sub_category').insertOne(params).then((result)=>{
                console.log(result);
            })
        })
        res.redirect('/admin/subcatadd')
    })

//edit (subcategory)
    router.get('/edit1/:id',controller.adminEdit1);
    router.post('/subcatadd/:id',(req,res)=>{
        let upId = req.params.id;
        let params = {
            Category1 : req.body.category,
            Subcategory : req.body.subcat
        }
        database.then((data)=>{
            data.collection('sub_category').updateOne({_id:new mongo.ObjectId(upId)},{$set:params}).then((result)=>{
                console.log(result);
            })
        })
        res.redirect('/admin/subcatadd')
    })

//delete (subcategory)
    router.get('/subcatadd/delete/:id',(req,res)=>{
        let delid = req.params.id;
        console.log(delid);
        database.then((resDb)=>{
            resDb.collection('sub_category').deleteOne({_id:new mongo.ObjectId(delid)}).then((result2)=>{
                console.log(result2);
            })
        })
        res.redirect('/admin/subcatadd')
    })

    //products
    router.get('/adminproduct',controller.adminProduct);

    router.get('/productadd',controller.adminAdd);
    router.post('/productadd',(req,res)=>{
        let params ={
            Category2 : req.body.category,
            Subcategory1 : req.body.subcategory,
            ProductName : req.body.productname,
            ProductDescription : req.body.productdescription,
            ProductPrice : req.body.productprice,
            ProductImage : req.files.file.name
        }
        console.log(params);
        database.then((data)=>{
            data.collection('product').insertOne(params).then((result)=>{
                let fileup = req.files.file;
                fileup.mv('public/images/' +params.ProductImage).then((imgRes)=>{
                    console.log(imgRes);
                    res.redirect('/admin/adminproduct')
                })
            })
        })
    })

    router.get('/adminproduct/delete/:id',(req,res)=>{
        let delid = req.params.id;
        console.log(delid);
        database.then((resDb)=>{
            resDb.collection('product').deleteOne({_id: new mongo.ObjectId(delid)}).then((result)=>{
                console.log(result);
            })
        })
        res.redirect('/admin/adminproduct');
    
    })


            
        router.get('/edit2/:id',controller.adminEdit2);
        // router.get('/admin/edit1/:id',controller.adminEdit);
        router.post('/edit2/:id',(req,res)=>{
            let upId = req.params.id;
            let params={
                Category2 : req.body.category,
                Subcategory1 : req.body.subcategory,
                ProductName : req.body.productname,
                ProductDescription : req.body.productdescription,
                ProductPrice : req.body.productprice,
                ProductImage: req.files?.file?.name
            }
            let upDate = ''
            if(req.files?.file){
                upDate ={
                    Category2 : params.Category2,
                    Subcategory1 : params.Subcategory1,
                    ProductName : params.ProductName,
                    ProductDescription: params.ProductDescription,
                    ProductPrice : params.ProductPrice,
                    ProductImage: params.ProductImage
                }
                let fileup=req.files.file;
                fileup.mv('public/images/' +params.ProductImage)
            }
            else{
                upDate ={
                    Category2: params.Category2,
                    Subcategory1 : params.Subcategory1,
                    ProductName : params.ProductName,
                    ProductDescription: params.ProductDescription,
                    ProductPrice : params.ProductPrice
                }
            }
                    database.then((data)=>{
                        data.collection('product').updateOne({_id:new mongo.ObjectId(upId)},{$set:upDate}).then((result)=>{
                            console.log(result);
                        })
                    })
           res.redirect('/admin/adminproduct')     
            
        })

        router.get('/logout',(req,res)=>{
            req.session.destroy()
            res.redirect('/login')
        })

        router.get('/userlist',controller.userList);
        router.get('/user/orders/:userId',controller.viewlist);

module.exports = router;

controller.js (user)
var database = require('../../config/database');
var mongo = require('mongodb');


exports.userIndex = (req, res) => {
    res.render('user/test');
}


exports.userHome = (req, res) => {
    database.then(async(resDb) => {
        const productinfo = await resDb.collection('product').find().toArray();
        const categoryinfo = await resDb.collection('ecommerce').find().toArray();

        let cartCount=0;
        let orderCount =0;
        if(req.session.user)
        {
            const cartItems= await resDb.collection('cart').find({sessionId:req.session.user._id}).toArray();
            cartCount=cartItems.length;
            const orderItems= await resDb.collection('orders').find({userId:req.session.user._id,userstatus:1}).toArray();
            orderCount=orderItems.length;
        }

        res.render('user/home',{productinfo, categoryinfo, user:req.session.user,cartCount,orderCount, currentPage: 'home'})
    })

}


exports.productList = (req, res) => {
    let reqid = req.params.id;
    database.then(async(resDb) => {
        let cartCount=0;
        let orderCount=0;
        if(req.session.user)
            {
                const cartItems= await resDb.collection('cart').find({sessionId:req.session.user._id}).toArray();
                cartCount=cartItems.length;
                const orderItems= await resDb.collection('orders').find({userId:req.session.user._id,userstatus:1}).toArray();
                orderCount=orderItems.length;
            }
        resDb.collection('product').findOne({ _id: new mongo.ObjectId(reqid) }).then((result) => {
            res.render('user/userproduct', { result, user:req.session.user,orderCount,cartCount })

        })
    })
}


exports.categoryList =(req,res) =>{
    let reqid = req.params.id;
    database.then(async(resDb) => {
        let cartCount=0;
        let orderCount=0;
        if(req.session.user)
            {
                const cartItems= await resDb.collection('cart').find({sessionId:req.session.user._id}).toArray();
                cartCount=cartItems.length;
                const orderItems= await resDb.collection('orders').find({userId:req.session.user._id,userstatus:1}).toArray();
                orderCount=orderItems.length;
            }
        const categoryinfo = await resDb.collection('ecommerce').findOne({_id:new mongo.ObjectId(reqid)})
        const productinfo = await resDb.collection('product').aggregate([
            {
                $match:{Category2:reqid}
            },
            {
                "$addFields":{"categoryid":{"$toObjectId":"$Category2"}}
            },
            {
                $lookup:{
                    from: "ecommerce",
                    localField: "categoryid",
                    foreignField: "_id",
                    as:"categorydetails"
                }
            },
            {$unwind: "$categorydetails"},
        ])
        .toArray();
        res.render('user/usercategory',{cartCount,orderCount,categoryinfo, productinfo, user:req.session.user})
        })
    }

exports.userReg =(req,res)=>{
    database.then((resDb)=>{
        resDb.collection('siteReg').find().toArray().then((result1)=>{
            res.render('user/register',{result1})
        })
    })
}

exports.userLogin =(req,res)=>{
    res.render('user/login')
}

exports.userCart =(req,res)=>{
    database.then(async(resDb)=>{
        let userId=req.session.user._id;
        let cartItems= await resDb.collection('cart').find({sessionId:userId, userstatus:0}).toArray()
        let orderCount=0;
        if(req.session.user)
            {
                // const cartItems= await resDb.collection('cart').find({sessionId:req.session.user._id}).toArray();
                // cartCount=cartItems.length;
                const orderItems= await resDb.collection('orders').find({userId:req.session.user._id,userstatus:1}).toArray();
                orderCount=orderItems.length;
            }

        let productDetails=await resDb.collection('product').aggregate([
            {
                $match:{_id:{$in: cartItems.map(item=>new mongo.ObjectId(item.productId))}}
            }
        ]).toArray()
        let cartCount = cartItems.length;
        let totalPrice = productDetails.reduce((acc,product)=> acc + Number(product.ProductPrice),0)
        console.log(totalPrice)
        res.render('user/cart',{user:req.session.user,productDetails,orderCount,cartCount,totalPrice})
    })
}

exports.userOrder = async (req, res) => {
    let userId = req.session.user._id;
    database.then(async (resDb) => {
        let orderItems = await resDb.collection('orders').find({ userId: userId, userstatus: 1 }).toArray();
        let orderCount =0;
        if(req.session.user)
            {
                const cartItems= await resDb.collection('cart').find({sessionId:req.session.user._id}).toArray();
                var cartCount=cartItems.length;
                const orderItems= await resDb.collection('orders').find({userId:req.session.user._id,userstatus:1}).toArray();
                orderCount=orderItems.length;
            }
    
        if (orderItems.length === 0) {
            console.log('No order items found.');
            res.render('user/order', { orderItems: [], user: req.session.user, cartCount: 0 });
            return;
        }

        const { ObjectId } = require('mongodb');

        const productsWithDetails = await resDb.collection('orders').aggregate([
            {
                $match: { userId: userId, userstatus: 1 }
            },
            {
                $lookup: {
                    from: 'product',
                    let: { productIdString: '$productId' }, 
                    pipeline: [
                        {
                            $match: {
                                $expr: { $eq: ['$_id', { $toObjectId: '$$productIdString' }] }
                            }
                        }
                    ],
                    as: 'productDetails'
                }
            },
            { $unwind: '$productDetails' }
        ]).toArray();

        console.log(productsWithDetails);

        // const cartCount = productsWithDetails.length;

        res.render('user/order', { orderItems: productsWithDetails, user: req.session.user, cartCount, orderCount });
    });
};


index.js (user)
var express = require('express');
var router = express.Router();
var database = require('../../config/database');
var mongo = require ('mongodb');
var controller = require('./controller');
var bcrypt = require ('bcrypt');

router.get('/',controller.userIndex);

router.get('/home',controller.userHome);

router.get('/userproduct/:id',controller.productList)
router.post('/cart/:id',(req,res)=>{
    // let productId = req.params.id;
    // let sessionId = req.session.id;
    let dbdata = {
        // productId:new mongo.ObjectId(productId),
        // sessionId: sessionId,
        // sessionId:new mongo.ObjectId(sessionId),
        productId: req.params.id,
        sessionId: req.session.user._id,
        userstatus: 0
    }

    database.then((data)=>{
        data.collection('cart').insertOne(dbdata).then((result)=>{
            console.log(result)
            res.redirect('/home');
            // res.redirect('/user/userproduct/${productId}');
        })
    })
})

router.get('/usercategory/:id',controller.categoryList)


router.get('/register',controller.userReg)
router.post('/register',(req,res)=>{
    let params={
        Name: req.body.name,
        Email: req.body.email,
        Password: req.body.password,
        status: 1
    }
    database.then((data)=>{
        bcrypt.hash(req.body.password,10).then((bpass)=>{
            params.Password=bpass
            data.collection('siteReg').insertOne(params).then((result)=>{
                console.log(result)
        })
        })
    })
    res.redirect('user/register');
})


router.get('/login',controller.userLogin);
router.post('/login',(req,res)=>{
    let params={
        Email: req.body.email,
        Password: req.body.password
    }
    database.then((data)=>{
        data.collection('siteReg').findOne({Email:params.Email}).then((result)=>{
            console.log(result._id)
            if(result){
                bcrypt.compare(params.Password,result.Password).then((crypt)=>{
                    if(crypt){
                        if(result.status==0){
                            req.session.user=result
                            res.redirect('/admin')
                        }
                        else{
                            req.session.user=result
                            res.redirect('/home') 
                        }
                    }
                    else{
                        console.log('Invalid')
                        res.redirect('user/login')
                    }
                })
            }
            else{
                console.log('Invalid User')
                res.redirect('user/login')
            }
        })
    })
})

router.get('/logout',(req,res)=>{
    req.session.destroy()
    res.redirect('/login')
})

router.get('/cart',controller.userCart)
router.post('/cart/delete/:id',(req,res)=>{
    let productId=req.params.id;
    let userId=req.session.user._id;

    database.then((data)=>{
        data.collection('cart').deleteOne({sessionId:userId,productId:productId}).then((result)=>{
            console.log(result)
            res.redirect('/cart')
        })
    })
})

router.post('/checkout', (req, res) => {
    let userId = req.session.user._id;

    database.then(async (data) => {
        let cartItems = await data.collection('cart').find({ sessionId: userId, userstatus: 0 }).toArray();

        if (cartItems.length === 0) {
            console.log("No items to checkout.");
            return res.redirect('/cart');
        }

        await data.collection('cart').updateMany({ sessionId: userId, userstatus: 0 }, { $set: { userstatus: 1 } });
        const orderData = cartItems.map(item => ({
            userId: userId,
            productId: item.productId,
            userstatus: 1,
            sessionId: userId
        }));

        await data.collection('orders').insertMany(orderData);

        await data.collection('cart').deleteMany({ sessionId: userId, userstatus: 1 });

        res.redirect('/order');
    });
});

router.get('/order',controller.userOrder)

module.exports = router;


index.js
var express = require('express');
var router = express.Router();

var admin = require('./admin');
var user = require('./user');

router.use('/admin',admin);
router.use('/user',user)
router.use('/',user);

module.exports = router;


style.css
html, body {
  height: 100%;             
  margin: 0;               
  padding: 0; 
  overflow-x: hidden;      
  overflow-y: auto;        
  box-sizing: border-box;  
}


body {
  /* padding: 50px; */
  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
  background-color:burlywood;
}

header{
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  font-weight:bolder;
  font-style: oblique;
}

a {
  color: #00B7FF;
  text-decoration: none;}

.table1{
  width: auto;
  margin: auto;
}

.table2{
  width: 80%;
  table-layout:auto;
  margin-left: auto;
}

th, td {
  padding: 15px;
}

.main {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

.card {
  /* display: flex; */
  margin: 5px;
}

.categorymain{
  margin: 10px;
  padding: 10px;
}

.productmain{
  margin: 10px;
  padding: 10px;
}

.cart-icon {
  position: relative;
  display: inline-block;
}

.cart-badge {
  position: absolute;
  top: -10px; 
  right: -5px;
  background-color: red;
  color: white;
  border-radius: 50%;
  padding: 4px 8px;
  font-size: 12px;
}
.order-badge {
  position: sticky;
  top: 15px;   
  right: 130px;
  background-color: red;
  color: white;
  border-radius: 50%;
  padding: 4px 8px;
  font-size: 12px;
}

carousel.css
.carousel {
  margin-bottom: 3rem;
}
.carousel-caption {
  bottom: 0.5rem;
  z-index: 1;
}
.carousel-item {
  height: 246px;
}
.carousel-item > img {
  position: absolute;
  top: 0;
  left: 0;
  min-width: 100%;
  width: 100%;
  height: 32rem;
}
.marketing .col-lg-4 {
  margin-bottom: 1.5rem;
  text-align: center;
}
.marketing h2 {
  font-weight: 400;
}
.marketing .col-lg-4 p {
  margin-right: .75rem;
  margin-left: .75rem;
}
.featurette-divider {
  margin: 5rem 0; /* Space out the Bootstrap <hr> more */
}
.featurette-heading {
  font-weight: 300;
  line-height: 1;
  letter-spacing: -.05rem;
}
@media (min-width: 40em) {
  /* Bump up size of carousel content */
  .carousel-caption p {
    margin-bottom: 1.25rem;
    font-size: 1.25rem;
    line-height: 1.4;
  }

  .featurette-heading {
    font-size: 50px;
  }
}

@media (min-width: 62em) {
  .featurette-heading {
    margin-top: 7rem;
  }
}


admincategory.hbs
                {{!-- Admin Page (admincategory) --}}
<div class="container mt-3" style="margin-left: 140px;">
    {{!-- margin-left: 190px --}}
        <div class="ms-auto text-end">
        <a href="/admin/categoryadd"><button class="btn btn-success" type="submit">Add</button></a> 
        </div>
        <br>
    <table class="table1 table-bordered">
        <thead>
            <tr>
                <th>Category</th>
                <th>Description</th>
                <th>Image</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {{#each result}}
            <tr>
                <td>{{this.Category}}</td>
                <td>{{this.Description}}</td>
                <td><img src="/images/{{this.Image}}" width="100" height="100"></td>
                <td>
                     {{!-- <a href="/admin/categoryedit/{{this._id}}" class="btn btn-warning">Edit</a>
                    <a href="/admin/categoryedit/{{this._id}}" class="btn btn-danger">Delete</a> --}}
                    <a href="/admin/categoryedit/{{this._id}}"><button type="submit" class="btn btn-warning">Edit</button></a>
                   <a href="/admin/admincategory/delete/{{this._id}}"> <button type="submit" class="btn btn-danger">Delete</button></a>
                </td>
            </tr>
            {{/each}}
        </tbody>
    </table>
</div>

adminproduct
                {{!-- Product Page --}}
<div class="container mt-3" style="margin-left: 175px;">
    {{!-- margin-left: 190px --}}
        <div class="ms-auto text-end">
        <a href="/admin/productadd"><button class="btn btn-success" type="submit">Add</button></a> 
        {{!-- /admin/categoryadd --}}
        </div>
        <br>
    <table class="table1 table-bordered"> 
        <thead>
            <tr>
                <th>Category</th>
                <th>Subcategory</th>
                <th>Product Name</th>
                <th>Product Description</th>
                <th>Product Price</th>
                <th>Product Image</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {{#each result2}}
            <tr>
                <td>{{this.catdet.Category}}</td>
                <td>{{this.subcatdet.Subcategory}}</td>
                <td>{{this.ProductName}}</td>
                <td>{{this.ProductDescription}}</td>
                <td>{{this.ProductPrice}}</td>
                <td>
                    <img src="/images/{{this.ProductImage}}" width="100" height="100">
                </td>
                <td>
                    <a href="/admin/edit2/{{this._id}}"><button type="submit" class="btn btn-warning">Edit</button></a>
                    <a href="/admin/adminproduct/delete/{{this._id}}"><button type="submit" class="btn btn-danger">Delete</button></a>
                </td>
            </tr>
             {{/each}}

        </tbody>
    </table>
</div>

adminsubcat
                {{!-- Subcategory Page --}}
<div class="container mt-3" style="margin-left: 190px;">
        <div class="ms-auto text-end">
        <a href="/admin/subcatadd"><button class="btn btn-success" type="submit">Add</button></a> 
        </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Category</th>
                <th>Subcategory</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {{#each result2}}
            <tr>
                <td>{{this.newForm.Category}}</td>
                <td>{{this.Subcategory}}</td>
                 <td>
                    <a href="/admin/edit1/{{this._id}}"><button class="btn btn-warning" type="submit">Edit</button></a> 
                    <a href="/admin/subcatadd/delete/{{this._id}}"><button class="btn btn-danger" type="submit">Delete</button></a>
                </td>

            </tr>
            {{/each}}
        </tbody>
    </table>
</div>

categoryadd
             {{!-- Add Page (Admin) --}}
<div class="container" style="margin-left: 175px;">
    <form action="{{!-- /admin/categoryadd --}}" method="post" enctype="multipart/form-data">
    <div>
        <br>
        Category : <input type="text" placeholder="Enter the Category" class="form-control" name="name">
    </div>

    <div>
        <br>
        Description : <textarea class="form-control" placeholder="Enter the Description" name="desc"> </textarea>
    </div>

    <div>
        <br>
        Image : <input type="file" class="form-control" name="file">
    </div>

    <div>
        <br>
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
    </form>
</div>

categoryedit
                    {{!-- Edit Page (Admin) --}}
<div class="container mt-3" style="margin-left:175px;">
    <form action="/admin/edit/{{result._id}}" method="post" enctype="multipart/form-data">
    <div>
        <br>
        Category : <input type="text" placeholder="Enter the Category" class="form-control" name="name" value="{{result.Category}}" >
    </div>

    <div>
        <br>
        Description : <textarea class="form-control" placeholder="Enter the Description" name="desc">{{result.Description}}</textarea>
    </div>

    <div>
        <br>
        Existing Image : <br><img src="/images/{{result.Image}}" width="200" height="200">
    </div>

    <div>
        <br>
        Update Image : <input type="file" class="form-control" name="file">
    </div>

    <div>
        <br>
        <button type="submit" class="btn btn-primary">Update</button>
    </div>
    </form>
</div>

edit1
             {{!--Subcat Edit Page --}}
<div class="container" style="margin-left: 180px;">
    <form action="/admin/subcatadd/{{result2._id}}" method="post">
    <div>
        <br>
        Category : <select class="form-select" name="category" id="select">
            {{!-- <option>..s e l e c t..</option> --}}
            {{#each result}}
            <option value="{{this._id}}">{{this.Category}}</option>
            {{/each}}
            </select>
            <input type="hidden" value="{{result2.Category1}}" id="hide">
    </div>

        <div>
        <br>
        Subcategory : <input type="text" name="subcat" class="form-control" value="{{result2.Subcategory}}">
    </div>

    <div>
        <br>
        <button type="submit" class="btn btn-primary">Update</button>
    </div>
    </form>
</div>
<script>
    let a = document.getElementById('select');
    let b = document.getElementById('hide').value;
    for(i=0;i<a.options.length;i++)
{
    var option = a.options[i];
    if(option.value==b){
        option.selected = true;
        break;
    }
}
</script>


subcatadd
             {{!--Subcat Add Page (Admin) --}}
<div class="container" style="margin-left: 175px;">
    <form action="{{!-- /admin/subcatadd --}}" method="post">
    <div>
        <br>
        Category : <select class="form-select" name="category">
            <option>. .s e l e c t. .</option>
            {{#each result}}
            <option value="{{this._id}}">{{this.Category}}</option>
            {{/each}}
            </select>
    </div>

    <div>
        <br>
        Subcategory : <input type="text" name="subcat" class="form-control">
    </div>

    <div>
        <br>
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
    </form>
</div>

    <br>
    <br>
    <div class="container" >
    <table class="table2 table-bordered">
        <thead>
            <tr align="left">
                <th>Category</th>
                <th>Subcategory</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {{#each result2}}
            <tr>
                <td>{{this.newForm.Category}}</td>
                <td>{{this.Subcategory}}</td>
                <td>
                    <a href="/admin/edit1/{{this._id}}"><button class="btn btn-warning" type="submit">Edit</button></a> 
                    <a href="/admin/subcatadd/delete/{{this._id}}"><button class="btn btn-danger" type="submit">Delete</button></a>
                </td>
            </tr>
            {{/each}}
        </tbody>
    </table>
    </div>

viewList
<div class="container mt-3" style="margin-left: 175px;">
    {{!-- margin-left: 190px --}}
        <div class="ms-auto text-end">
        </div>
        <br>
        {{#if orders.length}}
    <table class="table1 table-bordered"> 
        <thead>
            <tr>
                <th>Product Image</th>
                <th>Product Name</th>
                <th>Product Description</th>
                <th>Product Price</th>
            </tr>
        </thead>
        <tbody>
            {{#each orders}}
            <tr>
                <td>
                <img src="/images/{{this.productDetails.ProductImage}}" width="100" height="100">
                </td>
                {{!-- <td>{{this.productDetails.ProductImage}}</td> --}}
                <td>{{this.productDetails.ProductName}}</td>
                <td>{{this.productDetails.ProductDescription}}</td>
                <td>₹{{this.productDetails.ProductPrice}}</td>
            </tr>
             {{/each}}
        </tbody>
    </table>
    {{else}}
    <h3 style="text-align: center;">No orders by user</h3>
    {{/if}}
</div>



user
-------------

cart
<h3 style="font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;text-align:center; margin-top:2%; color:#000000; font-weight:bolder">Welcome to your Cart{{!-- <i class="fa-solid fa-cart-shopping fa-lg" style="color: #000000;"></i> --}}</h3>

        <section class="h-100 h-custom" style="background-color: #000814, #001d3d, #003566,#ffc300,#ffd60a ;">
            <div class="container py-5 h-100">
              <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col">
                  <div class="card">
                    <div class="card-body p-4">
                      <div class="row">
                        <div class="col-lg-7">
                            {{#each productDetails}}
                          <div class="d-flex justify-content-between align-items-center mb-4">
                          </div>
          
                          <div class="card mb-3">
                            <div class="card-body">
                              <div class="d-flex justify-content-between">
                                <div class="d-flex flex-row align-items-center">
                                  <div>
                                    <img
                                      src="/images/{{this.ProductImage}}"
                                      class="img-fluid rounded-3" alt="Item Image" style="width: 65px;">
                                  </div>
                                  <div class="ms-3">
                                    <h5>{{this.ProductName}}</h5>
                                  </div>
                                </div>
                                <div class="d-flex flex-row align-items-center">
                                  <div style="width: 50px;">
                                  </div>
                                  <div style="width: 80px;">
                                    <h5 class="mb-0">₹{{this.ProductPrice}}</h5>
                                  </div>
                                  <form action="/cart/delete/{{this._id}}" method="post">
                                    <button type="submit" style="color: #cecece;background:none;border:none;"><i class="fas fa-trash-alt"></i></button>
                                  </form>
                                  {{!-- <a href="#!" style="color: #cecece;"><i class="fas fa-trash-alt"></i></a> --}}
                                </div>
                              </div>
                            </div>
                          </div>
                          {{/each}}
          
          
                        </div>
                        <div class="col-lg-5">
<!--                           bg-primary text-white rounded-3
 -->                          <div class="card  text-white rounded-3" style="background-color:#000814">
                            <div class="card-body">
                              <div class="d-flex justify-content-between align-items-center mb-4">
                                <h5 class="mb-0" style="font-weight: bolder;">Order Summary</h5>
                              </div>
          
                              </form>
          
                              <hr class="my-4">
          
                              <div class="d-flex justify-content-between">
                                <p class="mb-2">No. of Items</p>
                                <p class="mb-2">{{cartCount}}</p>
                              </div>
          
          
                              <div class="d-flex justify-content-between mb-4">
                                <p class="mb-2">Total Price</p>
                                <p class="mb-2">{{totalPrice}} <strong>₹</strong></p>
                              </div>

                            <form action="/checkout" method="POST">
                              <button type="submit" class="btn btn-success btn-block btn-lg">
                                <div class="d-flex justify-content-between">
                                  <span>Checkout</span>
                                </div>
                              </button>
                            </form>



          
                              {{!-- <button  type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-success btn-block btn-lg">
                                <div class="d-flex justify-content-between">
                                  <span>Checkout</span>
                                </div>
                              </button> --}}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

userproduct.hbs
<div class="productmain">
    <br>
    <h2 style="font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;">Product- {{result.ProductName}}</h2>
    <hr>
    <div class="row">
     <div class="col col-3">
        
        <div class="card" style="width: 17rem; height:10rem;">
         <img src="/images/{{result.ProductImage}}" class="card-img-top" width="200" height="200" alt="...">
       </div>
     </div>

    <div class="col col-3">
        <div class="card" style="width: 17rem; height:12.5rem;">
          <div class="card-body">
                <h5 class="card-title">{{result.ProductName}}</h5>
                <p class="card-text"><strong>₹</strong>{{result.ProductPrice}}/-</p>
                <p class="card-text">{{result.ProductDescription}}</p>
                {{!-- <a href="/user/cart/{{result._id}}"><button type="submit" class="btn btn-warning">Add To Cart</button></a> --}}
                <form action="/user/cart/{{result._id}}" method="POST">
                <button type="submit" class="btn btn-warning">Add To Cart</button>
                </form>
          </div>
        </div>
    </div>
    </div>

</div>

